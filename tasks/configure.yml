---

- name: Create transparent hugepages init script
  template:
    src: "disable-transparent-hugepages.j2"
    dest: "/etc/init.d/disable-transparent-hugepages"
    owner: 'root'
    group: 'root'
    mode: '0755'
  register: mongodb_create_init_hugepages
  when: mongodb_disable_transparent_hugepages

- name: Start transparent hugepages init script
  systemd:
    name: 'disable-transparent-hugepages'
    state: 'restarted'
    enabled: True
  when:
    - mongodb_disable_transparent_hugepages
    - mongodb_create_init_hugepages.changed

- name: Create keyFile
  copy:
    dest: "{{ mongodb_security_keyfile }}"
    content: "{{ mongodb_keyfile_content }}"
    owner: "{{ mongodb_user }}"
    group: "root"
    mode: 0600
  register: keyfile_result
  when: mongodb_replication_replset and mongodb_replication_replset != ''

- name: Create PEMKeyFile
  copy:
    dest: "{{ mongodb_net_ssl_pemfile }}"
    content: "{{ mongodb_net_ssl_pemkeyfile_content }}"
    owner: "{{ mongodb_user }}"
    group: "root"
    mode: 0600
  register: pemkeyfile_result
  when: mongodb_net_ssl_pemfile is defined and mongodb_net_ssl_mode is defined and mongodb_net_ssl == 'enabled' and
        mongodb_net_ssl_pemkeyfile_content is defined and mongodb_net_ssl_pemkeyfile_content != ''

- name: Create CAFile
  copy:
    dest: "{{ mongodb_net_ssl_cafile }}"
    content: "{{ mongodb_net_ssl_cafile_content }}"
    owner: "{{ mongodb_user }}"
    group: "root"
    mode: 0600
  register: cafile_result
  when: mongodb_net_ssl_cafile is defined and mongodb_net_ssl_mode is defined and mongodb_net_ssl == 'enabled' and
        mongodb_net_ssl_cafile_content is defined and mongodb_net_ssl_cafile_content != ''

- name: set mongodb gid
  group: name=mongodb gid={{ mongodb_gid }} state=present
  when: mongodb_gid

- name: set mongodb uid
  user: name=mongodb uid={{ mongodb_uid }} group=mongodb state=present
  when: mongodb_uid

- name: reset mongodb folder and subfolders with new uid
  file: path={{ mongodb_storage_dbpath }} owner=mongodb group=mongodb follow=yes recurse=yes state=directory
  when: mongodb_uid

- name: Create log dir if missing
  file: state=directory recurse=yes dest={{ mongodb_systemlog_path|dirname }} owner={{ mongodb_user }} group={{mongodb_user}} mode=0755
  when: mongodb_systemlog_destination == "file"

- name: Check than logfile exists
  stat: path={{ mongodb_systemlog_path }}
  register: logfile_stat
  when: mongodb_systemlog_destination == "file"

- name: Create log if missing
  file: state=touch dest={{ mongodb_systemlog_path }} owner={{ mongodb_user }} group={{mongodb_user}} mode=0644
  when: ( logfile_stat is defined
        and not logfile_stat.stat.exists
        and mongodb_systemlog_destination == "file" )

- name: Ensure dbpath directory
  file:
    path: "{{ mongodb_storage_dbpath }}"
    state: directory
    owner: "{{ mongodb_user }}"
    recurse: yes

- name: Configure mongodb
  template: src=mongod.conf.j2 dest=/etc/mongod.conf backup=yes owner=root group=root mode=0644
  register: config_result

- name: mongodb restart
  service: name={{ mongodb_daemon_name }} state=restarted
  when: "(config_result is changed
          or keyfile_result is changed
          or pemkeyfile_result is changed
          or cafile_result is changed
          or mongodb_create_init_hugepages is changed
          ) and mongodb_manage_service"

- name: Ensure service is started
  service: name={{ mongodb_daemon_name }} state=started enabled=yes

- name: Wait when mongodb is started
  wait_for:
    host: "{{ item }}"
    port: "{{ mongodb_net_port }}"
    timeout: 120
  with_items: "{{ mongodb_net_bindip.split(',') | map('replace', '0.0.0.0', '127.0.0.1') | list }}"

- name: configure log rotation
  template:
    src: logrotate.j2
    dest: /etc/logrotate.d/mongodb
    owner: root
    group: root
    mode: 0644
  when: mongodb_logrotate_options
